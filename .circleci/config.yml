# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
#
version: 2.1
commands:
  docker_login:
    parameters:
      load:
        type: boolean
        default: False
    steps:
      - run:
          name: Login to Dockerhub
          command: |
            USER="${DOCKER_USER}"
            PASS="${DOCKER_PASS}"
            if <<parameters.load>>; then
              echo "Using load test repository credentials"
              USER="${DOCKER_LOAD_TEST_USER}"
              PASS="${DOCKER_LOAD_TEST_PASS}"
            fi
            if [ "${USER}" == "" ] || [ "${PASS}" == "" ]; then
              echo "Skipping Login to Dockerhub, no credentials."
            else
              echo "${PASS}" | docker login -u="${USER}" --password-stdin
            fi
  setup-rust:
    steps:
      - run:
          name: Setup Rust
          command: |
            rustup install stable
            rustup default stable
            rustup update
            rustc --version
  setup-rust-check:
    steps:
      - run:
          name: Setup Rust checks
          command: |
            rustup component add rustfmt
            cargo install cargo-audit
            rustup component add clippy
  rust-check:
    steps:
      - run:
          name: Core Rust Checks
          command: |
            cargo fmt -- --check
            # cargo audit --ignore RUSTSEC-2020-0041
            cargo audit
  rust-clippy:
    steps:
      - run:
          name: Rust Clippy
          command: |
            cargo clippy --all --all-targets --all-features -- -D warnings
  cargo-build:
    steps:
      - run:
          name: cargo build
          command: cargo build
  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per
            # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

  run-tests:
    steps:
      - run:
          name: cargo test
          command: cargo test --all --verbose

jobs:
  checks:
    docker:
      - image: circleci/rust:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup-rust
      - setup-rust-check
      - rust-check
      - rust-clippy

  build-and-test:
    docker:
      - image: circleci/rust:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
            RUST_BACKTRACE: 1
            # XXX: begin_test_transaction doesn't play nice over threaded tests
            RUST_TEST_THREADS: 1
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to Dockerhub
          command: |
            if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
              echo "Skipping Login to DockerHub, credentials unavailable"
            else
              echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
            fi
      - checkout
      - setup-rust
      - write-version
      - cargo-build
      - run-tests
      #- save-sccache-cache
      - run:
          name: Build Docker image
          command: docker build -t app:build .
      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: |
            mkdir -p /home/circleci/cache
            docker save -o /home/circleci/cache/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}-{{ epoch }}
          paths:
            - /home/circleci/cache

  deploy:
    docker:
      - image: docker:18.03.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    parameters:
      image:
        type: string
      repo:
        type: string
    steps:
      - setup_remote_docker
      - docker_login
      - attach_workspace:
          at: /cache
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar
      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # deploy master
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag <<parameters.image>> <<parameters.repo>>:latest
              docker push <<parameters.repo>>:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # deploy a release tag
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "<<parameters.repo>>:${CIRCLE_TAG}"
              docker tag <<parameters.image>> "<<parameters.repo>>:${CIRCLE_TAG}"
              docker images
              docker push "<<parameters.repo>>:${CIRCLE_TAG}"
            fi

workflows:
  build-deploy:
    jobs:
      - checks:
          filters:
            tags:
              only: /.*/
      - build-and-test:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build-and-test
          filters:
            tags:
              only: /.*/
